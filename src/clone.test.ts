import { expect, it } from 'vitest'
import { deepClone, shallowClone, simpleClone } from './clone'

it('simpleClone', () => {
  expect(simpleClone('')).toEqual('')
  expect(simpleClone(1)).toEqual(1)
  expect(simpleClone([1])).toEqual([1])
  expect(simpleClone({ a: 1 })).toEqual({ a: 1 })
  expect(simpleClone(false)).toEqual(false)
})

it('shallowClone', () => {
  expect(shallowClone('')).toEqual('')
  expect(shallowClone({ a: 1 })).toEqual({ a: 1 })
  expect(shallowClone([{ a: 1 }])).toEqual([{ a: 1 }])
  expect(shallowClone(new Date())).toEqual(new Date())
  expect(shallowClone(new ArrayBuffer(1))).toEqual(new ArrayBuffer(1))
  expect(shallowClone(new SharedArrayBuffer(1))).toEqual(new SharedArrayBuffer(1))
  expect(shallowClone(/a/)).toEqual(/a/)
  expect(shallowClone(new DataView(new ArrayBuffer(1)))).toEqual(new DataView(new ArrayBuffer(1)))
  expect(shallowClone(new Error('message'))).toEqual(new Error('message'))
  expect(shallowClone(new File(['a'], 'a'))).toEqual(new File(['a'], 'a'))
})

it('deepClone', () => {
  expect(deepClone('')).toBe('')
  expect(deepClone(1)).toBe(1)
  expect(deepClone(true)).toBe(true)
  expect(deepClone(null)).toBe(null)
  expect(deepClone(undefined)).toBe(undefined)
  expect(deepClone([1])).toEqual([1])
  const symbol = Symbol('a')
  expect(deepClone(symbol)).toBe(symbol)
  expect(deepClone(new Date())).toEqual(new Date())
  expect(deepClone(new ArrayBuffer(1))).toEqual(new ArrayBuffer(1))
  expect(deepClone(new SharedArrayBuffer(1))).toEqual(new SharedArrayBuffer(1))
  expect(deepClone(/a/)).toEqual(/a/)
  expect(deepClone(/test/.exec('hello test'))).toEqual(/test/.exec('hello test'))
  expect(deepClone(new DataView(new ArrayBuffer(1)))).toEqual(new DataView(new ArrayBuffer(1)))
  expect(deepClone(new Error('message'))).toEqual(new Error('message'))
  expect(deepClone(new File(['a'], 'a'))).toEqual(new File(['a'], 'a'))
  expect(deepClone({ a: 1 })).toEqual({ a: 1 })
  expect(deepClone({ a: { b: { c: 1 } } })).toEqual({ a: { b: { c: 1 } } })
  expect(deepClone([{ a: { b: { c: 1 } } }])).toEqual([{ a: { b: { c: 1 } } }])
  expect(deepClone(new Set([1]))).toEqual(new Set([1]))
  expect(deepClone(new Map([['a', 1]]))).toEqual(new Map([['a', 1]]))
  // eslint-disable-next-line node/prefer-global/buffer
  expect(deepClone(Buffer.from('a'))).toEqual(Buffer.from('a'))
  expect(deepClone(new Uint8Array([1]))).toEqual(new Uint8Array([1]))
  expect(deepClone(new Int8Array([1]))).toEqual(new Int8Array([1]))
  expect(deepClone(new Uint16Array([1]))).toEqual(new Uint16Array([1]))
  expect(deepClone(new Int16Array([1]))).toEqual(new Int16Array([1]))
  expect(deepClone(new Uint32Array([1]))).toEqual(new Uint32Array([1]))
  expect(deepClone(new Int32Array([1]))).toEqual(new Int32Array([1]))
  expect(deepClone(new Float32Array([1]))).toEqual(new Float32Array([1]))
  expect(deepClone(new Float64Array([1]))).toEqual(new Float64Array([1]))
  expect(deepClone(new Blob(['a']))).toEqual(new Blob(['a']))
  expect(deepClone(new Error('message'))).toEqual(new Error('message'))
})
